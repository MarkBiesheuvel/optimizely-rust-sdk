// Relative imports of sub modules
use common::get_decision;
mod common;

macro_rules! assert_decision {
    ($flag_key: ident, $user_id: expr, $enabled: expr, $variation_key: expr) => {
        let decision = get_decision($user_id, $flag_key);

        assert_eq!(decision.enabled(), $enabled);
        assert_eq!(decision.variation_key(), $variation_key);
    };
}

#[test]
fn qa_rollout_flag() {
    let flag_key = "qa_rollout";

    // Test against decision generated by the Python SDK
    assert_decision!(flag_key, "user0", false, "off");
    assert_decision!(flag_key, "user1", false, "off");
    assert_decision!(flag_key, "user2", false, "off");
    assert_decision!(flag_key, "user3", true, "on");
    assert_decision!(flag_key, "user4", true, "on");
    assert_decision!(flag_key, "user5", false, "off");
    assert_decision!(flag_key, "user6", true, "on");
    assert_decision!(flag_key, "user7", true, "on");
    assert_decision!(flag_key, "user8", false, "off");
    assert_decision!(flag_key, "user9", true, "on");
    assert_decision!(flag_key, "user10", true, "on");
    assert_decision!(flag_key, "user11", true, "on");
    assert_decision!(flag_key, "user12", false, "off");
    assert_decision!(flag_key, "user13", true, "on");
    assert_decision!(flag_key, "user14", false, "off");
    assert_decision!(flag_key, "user15", true, "on");
}

#[test]
fn buy_button_flag() {
    let flag_key = "buy_button";

    assert_decision!(flag_key, "user0", true, "primary");
    assert_decision!(flag_key, "user1", true, "danger");
    assert_decision!(flag_key, "user2", true, "primary");
    assert_decision!(flag_key, "user3", true, "primary");
    assert_decision!(flag_key, "user4", true, "danger");
    assert_decision!(flag_key, "user5", true, "success");
    assert_decision!(flag_key, "user6", true, "success");
    assert_decision!(flag_key, "user7", true, "danger");
    assert_decision!(flag_key, "user8", true, "danger");
    assert_decision!(flag_key, "user9", true, "success");
    assert_decision!(flag_key, "user10", true, "success");
    assert_decision!(flag_key, "user11", true, "danger");
    assert_decision!(flag_key, "user12", true, "danger");
    assert_decision!(flag_key, "user13", true, "danger");
    assert_decision!(flag_key, "user14", true, "success");
    assert_decision!(flag_key, "user15", true, "danger");
}

#[test]
fn invalid_flag() {
    let flag_key = "this_flag_does_not_exist";

    // An invalid flag should always be disabled
    assert_decision!(flag_key, "user1", false, "off");
    assert_decision!(flag_key, "user2", false, "off");
    assert_decision!(flag_key, "user3", false, "off");
    assert_decision!(flag_key, "user4", false, "off");
}
